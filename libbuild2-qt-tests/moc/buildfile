# @@ TODO Test generated headers

qt.version = $config.libbuild2_qt_tests.qt

using qt.moc

if ($qt.version == 5)
  import libs = libQt5Core%lib{Qt5Core}
else
  import libs = libQt6Core%lib{Qt6Core}

# Headers, source files.
#
exe{driver}: hxx{source sink} cxx{driver sink}

# C++ source files generated by moc.
#
# cxx{*} are generated from hxx{} and are compiled (by convention).
#
# moc{*} are generated from cxx{} and are included.
#
exe{driver}: cxx{moc_source sink_moc} # Compiled.
exe{driver}: moc{sink}                # Included.

# Utility library through which lib{Qt*Core}'s library metadata (poptions) is
# made available to moc (see below for details).
#
libue{QtCoreMeta}: $libs

exe{driver}: libue{QtCoreMeta}

# Generate:
#
# moc_source.cxx from source.hxx
# sink_moc.cxx   from sink.hxx (note: unconventional output filename)
# sinc.moc       from sink.cxx
#
# Use a rule hint for cxx{sink_moc} because it breaks the moc naming
# conventions (which recommend a `moc_` prefix for outputs generated from
# headers).
#
# Add libue{QtCoreMeta} as a prerequisite to cause lib{Qt*Core}'s library
# metadata (exported options such as macro definitions, header search
# directories, etc.) to be passed to moc. Note that we cannot pass
# lib{Qt*Core} directly because the moc rule would be unable to choose between
# the shared or static version.
#
cxx{moc_source}:                    hxx{source} libue{QtCoreMeta}
[rule_hint=qt.moc] cxx{sink_moc}:   hxx{sink}   libue{QtCoreMeta}
moc{sink}:                          cxx{sink}   libue{QtCoreMeta}

# Set the include path prefix.
#
# Also test handling of multiple earlier instances using different forms with
# invalid prefixes.
#
qt.moc.options = --p=xxx --p yyy -pzzz -p moc

cxx.poptions += "-I$out_root" "-I$src_root"
